from src.core.entities.models import SensorTemp
from src.core.schemas.bd_schema import SensorTempSchema
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import insert
from typing import Optional
from src.core.repositories.interfaces.sensor_interface import SensorInterface

class SensorTempRepository(SensorInterface):

    def __init__(self, db: AsyncSession) -> None:
        self.__db = db

    async def add_sensor(self, sensor: SensorTempSchema) -> SensorTemp:
        query = insert(SensorTemp).values(
            name=sensor.name,
            location=sensor.location,
            nursing_home_id=sensor.nursing_home_id,
            status="Ativo",  # Assuming default status is "Ativo"
            phone=sensor.phone
            
        )
        await self.__db.execute(query)
        await self.__db.commit()

     
        return SensorTemp(
            id=sensor.id, # Assuming the ID is auto-generated by the database 
            name=sensor.name,
            location=sensor.location,
            nursing_home_id=sensor.nursing_home_id,
            status=sensor.status,
            phone=sensor.phone
        )
    
    async def get_sensor_by_id(self, sensor_id: str) -> Optional[SensorTemp]:
        query = select(SensorTemp).where(SensorTemp.id == sensor_id)
        result = await self.__db.execute(query)
        return result.scalar_one_or_none()
    
    async def get_all_sensors_by_nursing_home(self, nursing_home_id: str) -> list[SensorTemp]:
        query = select(SensorTemp).where(SensorTemp.nursing_home_id == nursing_home_id)
        result = await self.__db.execute(query)
        return result.scalars().all()